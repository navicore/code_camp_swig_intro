# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_jacks', [dirname(__file__)])
        except ImportError:
            import _jacks
            return _jacks
        if fp is not None:
            try:
                _mod = imp.load_module('_jacks', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _jacks = swig_import_helper()
    del swig_import_helper
else:
    import _jacks
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


PROCESS = _jacks.PROCESS
SESSION = _jacks.SESSION
ERR = _jacks.ERR
SAMPLE_RATE_CHANGE = _jacks.SAMPLE_RATE_CHANGE
SHUTDOWN = _jacks.SHUTDOWN
JackTransportStopped = _jacks.JackTransportStopped
JackTransportRolling = _jacks.JackTransportRolling
JackTransportLooping = _jacks.JackTransportLooping
JackTransportStarting = _jacks.JackTransportStarting
JackPortIsInput = _jacks.JackPortIsInput
JackPortIsOutput = _jacks.JackPortIsOutput
JackPortIsPhysical = _jacks.JackPortIsPhysical
JackPortCanMonitor = _jacks.JackPortCanMonitor
JackPortIsTerminal = _jacks.JackPortIsTerminal
JackNullOption = _jacks.JackNullOption
JackNoStartServer = _jacks.JackNoStartServer
JackUseExactName = _jacks.JackUseExactName
JackServerName = _jacks.JackServerName
JackLoadName = _jacks.JackLoadName
JackLoadInit = _jacks.JackLoadInit
JackSessionID = _jacks.JackSessionID
JackSessionSave = _jacks.JackSessionSave
JackSessionSaveAndQuit = _jacks.JackSessionSaveAndQuit
JackSessionSaveTemplate = _jacks.JackSessionSaveTemplate
JackSessionSaveError = _jacks.JackSessionSaveError
JackSessionNeedTerminal = _jacks.JackSessionNeedTerminal
JackCaptureLatency = _jacks.JackCaptureLatency
JackPlaybackLatency = _jacks.JackPlaybackLatency
class JsPortBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JsPortBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JsPortBuffer, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _jacks.delete_JsPortBuffer
    __del__ = lambda self : None;
    def getf(self, *args): return _jacks.JsPortBuffer_getf(self, *args)
    def setf(self, *args): return _jacks.JsPortBuffer_setf(self, *args)
    def length(self): return _jacks.JsPortBuffer_length(self)
    def toHexString(self, *args): return _jacks.JsPortBuffer_toHexString(self, *args)
    def __init__(self): 
        this = _jacks.new_JsPortBuffer()
        try: self.this.append(this)
        except: self.this = this
JsPortBuffer_swigregister = _jacks.JsPortBuffer_swigregister
JsPortBuffer_swigregister(JsPortBuffer)

class JsLatencyRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JsLatencyRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JsLatencyRange, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _jacks.delete_JsLatencyRange
    __del__ = lambda self : None;
    def min(self): return _jacks.JsLatencyRange_min(self)
    def max(self): return _jacks.JsLatencyRange_max(self)
    def __init__(self): 
        this = _jacks.new_JsLatencyRange()
        try: self.this.append(this)
        except: self.this = this
JsLatencyRange_swigregister = _jacks.JsLatencyRange_swigregister
JsLatencyRange_swigregister(JsLatencyRange)

class StringList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringList, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _jacks.delete_StringList
    __del__ = lambda self : None;
    def get(self, *args): return _jacks.StringList_get(self, *args)
    def length(self): return _jacks.StringList_length(self)
    def __init__(self): 
        this = _jacks.new_StringList()
        try: self.this.append(this)
        except: self.this = this
StringList_swigregister = _jacks.StringList_swigregister
StringList_swigregister(StringList)

class JsPort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JsPort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JsPort, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _jacks.delete_JsPort
    __del__ = lambda self : None;
    def getBuffer(self): return _jacks.JsPort_getBuffer(self)
    def name(self): return _jacks.JsPort_name(self)
    def connect(self, *args): return _jacks.JsPort_connect(self, *args)
    def getLatencyRange(self, *args): return _jacks.JsPort_getLatencyRange(self, *args)
    def setLatencyRange(self, *args): return _jacks.JsPort_setLatencyRange(self, *args)
    def __init__(self): 
        this = _jacks.new_JsPort()
        try: self.this.append(this)
        except: self.this = this
JsPort_swigregister = _jacks.JsPort_swigregister
JsPort_swigregister(JsPort)

class JsEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JsEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JsEvent, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _jacks.delete_JsEvent
    __del__ = lambda self : None;
    def getType(self): return _jacks.JsEvent_getType(self)
    def getData(self): return _jacks.JsEvent_getData(self)
    def complete(self): return _jacks.JsEvent_complete(self)
    def getSessionEventType(self): return _jacks.JsEvent_getSessionEventType(self)
    def getSessionDir(self): return _jacks.JsEvent_getSessionDir(self)
    def setSessionDir(self, *args): return _jacks.JsEvent_setSessionDir(self, *args)
    def getClientUuid(self): return _jacks.JsEvent_getClientUuid(self)
    def setClientUuid(self, *args): return _jacks.JsEvent_setClientUuid(self, *args)
    def getCommandLine(self): return _jacks.JsEvent_getCommandLine(self)
    def setCommandLine(self, *args): return _jacks.JsEvent_setCommandLine(self, *args)
    def getSessionEventFlags(self): return _jacks.JsEvent_getSessionEventFlags(self)
    def setSessionEventFlags(self, *args): return _jacks.JsEvent_setSessionEventFlags(self, *args)
    def __init__(self): 
        this = _jacks.new_JsEvent()
        try: self.this.append(this)
        except: self.this = this
JsEvent_swigregister = _jacks.JsEvent_swigregister
JsEvent_swigregister(JsEvent)

class JsClient(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JsClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JsClient, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _jacks.new_JsClient(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _jacks.delete_JsClient
    __del__ = lambda self : None;
    def getPortNamesByType(self, *args): return _jacks.JsClient_getPortNamesByType(self, *args)
    def getPortNames(self, *args): return _jacks.JsClient_getPortNames(self, *args)
    def getPort(self, *args): return _jacks.JsClient_getPort(self, *args)
    def registerPort(self, *args): return _jacks.JsClient_registerPort(self, *args)
    def getEvent(self, *args): return _jacks.JsClient_getEvent(self, *args)
    def getSampleRate(self): return _jacks.JsClient_getSampleRate(self)
    def activate(self): return _jacks.JsClient_activate(self)
    def getName(self): return _jacks.JsClient_getName(self)
    def getTransportState(self): return _jacks.JsClient_getTransportState(self)
    def recomputeLatencies(self): return _jacks.JsClient_recomputeLatencies(self)
JsClient_swigregister = _jacks.JsClient_swigregister
JsClient_swigregister(JsClient)

# This file is compatible with both classic and new-style classes.


