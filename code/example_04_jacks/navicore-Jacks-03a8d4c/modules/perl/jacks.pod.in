=head1 LICENCE AND COPYRIGHT

 Copyright (C) 2012 Ed Sweeney
 
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation; either version 2.1 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public License
 along with this program; if not, write to the Free Software 
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

=head1 NAME

jacks - Scripting API for the Jack Audio Connection Kit

=head1 VERSION

This documentation refers to Jacks version @VERSION@.
Testing has been done with jack version 0.121.3

=head1 SYNOPSIS

Jacks is an API that lets high level languages like Perl,
Python, Ruby, and Lua access Jack Audio Connection Kit services.

=head1 DESCRIPTION

The core API is JsClient.

=over

=item * The JsClient uses locks and semephores to insure the jack client and your perl program
work in lock-step synchonicity

=item * A call to getEvent() will block until jack has sample data to process

=item * jack will wait in the background until you set the completion token
on the event.

=item * A re-writting of the jack example "simple_session_client.c" in jacks perl is:

#!/usr/bin/perl
use jacks;
use strict;
use warnings;
use Cwd 'abs_path';

my $jc;

if (defined($ARGV[0])) {
    print("restarting with uuid $ARGV[0]\n");
    $jc = jacks::JsClient->new("simpler", $ARGV[0], $jacks::JackSessionID);
} else {
    $jc = jacks::JsClient->new("simpler", undef, $jacks::JackNullOption);
}

my $in = $jc->registerPort("input", $jacks::JackPortIsInput);

my $out = $jc->registerPort("output", $jacks::JackPortIsOutput);

$jc->activate();

my $done = undef;
until($done) {

    my $jsevent = $jc->getEvent(-1);

    if ($jsevent->getType() == $jacks::PROCESS) {

        my $inbuffer = $in->getBuffer();

        my $outbuffer = $out->getBuffer();

        my $nframes = $outbuffer->length();

        for (my $i = 0; $i < $nframes; $i++) { #copy input to putput

          my $s = $inbuffer->getf($i);

          $outbuffer->setf($i,$s);

        }

    } elsif ($jsevent->getType() == $jacks::SAMPLE_RATE_CHANGE) {

        my $sr = $jc->getSampleRate();
        print("sample rate change event: sample rate is now $sr\n");

    } elsif ($jsevent->getType() == $jacks::SHUTDOWN) {

        print("jack shutdown event\n");
        $done = "done!";

    } elsif ($jsevent->getType() == $jacks::SESSION) {

        my $dir       = $jsevent->getSessionDir();
        my $uuid      = $jsevent->getUuid();
        my $se_type   = $jsevent->getSessionEventType();
        my $setypeTxt = $se_type == $jacks::JackSessionSave ? "save" : "quit";

        print("session notification: path $dir, uuid $uuid, type: $setypeTxt\n");

        if ($se_type == $jacks::JackSessionSaveAndQuit) {
            $done = "done!";
        }

        my $script_path = abs_path($0);
        my $cmd = "perl $script_path $uuid"; 
        $jsevent->setCommandLine($cmd); #tell jackd how to restart us

    } else {
        die("unknown event type\n");
    }

    $jsevent->complete();
}

print("simple_client.pl ended\n");


=item * The buffers made available to perl are references to the jack C float arrays
and must be accessed with '$sample->length()', '$sample->setf(pos, newvalue)', and
'$sample->getf(pos)'

=cut 

